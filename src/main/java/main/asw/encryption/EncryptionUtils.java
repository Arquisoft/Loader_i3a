package main.asw.encryption;

import org.apache.commons.lang3.RandomStringUtils;
import org.jasypt.util.password.StrongPasswordEncryptor;

import java.security.SecureRandom;

/**
 * Created by MIGUEL on 12/02/2017.
 */
public class EncryptionUtils {

    private static EncryptionUtils instance = null;

    private static SecureRandom secureRnd;  //Expensive to initialize
    private static StrongPasswordEncryptor passwordEncryptor;

    static {
        passwordEncryptor = new StrongPasswordEncryptor();
        secureRnd = new SecureRandom();
    }

    private EncryptionUtils() {

    }

    public static EncryptionUtils getInstance() {
        if (instance == null) {
            instance = new EncryptionUtils();
        }
        return instance;
    }

    /**
     * Generates a random password for the user. This password is composed of a random sequence of uppercase and
     * lowercase letters, numbers and symbols. A random string of length length is generated by means of a
     * SecureRandom, which is a lot less predictable than Random, thus more secure.
     *
     * @return the generated password
     */
    public String generatePassword() {
        int length = 15;
        char[] possibleCharacters = ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_").toCharArray();
        return RandomStringUtils.random(length, 0, possibleCharacters.length - 1, false, false, possibleCharacters, secureRnd);
    }

    /**
     * Encrypts the password
     *
     * @param unencryptedPass: unencrypted password
     * @return encrypted password
     */
    public String encryptPassword(String unencryptedPass) {
        return passwordEncryptor.encryptPassword(unencryptedPass);
    }

    /**
     * Just for testing purposes. Checks if a given password is correct
     *
     * @param inputPass Input password
     * @param encrypted Encrypted password
     * @return true if correct, false otherwise.
     */
    public boolean checkPassword(String inputPass, String encrypted) {
        return passwordEncryptor.checkPassword(inputPass, encrypted);
    }

}
